<!DOCTYPE html>  <html lang="en">  
<head>  
  <meta charset="UTF-8" />  
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>  
  <title>Group Member Registration</title>  
  <link rel="stylesheet" href="style.css"/>  
  <style>  
    /* Minimal safety CSS so the preview looks ok if style.css missing */  
    body { font-family: Arial, sans-serif; background:#f7f9fc; padding:20px; }  
    .container { max-width:820px; margin:auto; background:#fff; padding:20px; border-radius:8px; box-shadow:0 2px 8px rgba(0,0,0,0.06); }  
    .form-group { margin-bottom:12px; }  
    label { display:block; margin-bottom:6px; color:#222; }  
    input, select, button { width:100%; padding:10px; border-radius:6px; border:1px solid #ccc; font-size:15px; }  
    button { cursor:pointer; background:#003049; color:#fff; border:none; margin-top:6px; }  
    button.secondary { background:#f77f00; }  
    .hidden { display:none; }  
    h2 { text-align:center; color:#003049; margin-bottom:14px; }  
    .small { font-size:0.9rem; color:#555; }  
    .two-col { display:grid; grid-template-columns:1fr 1fr; gap:12px; }  
    @media (max-width:600px){ .two-col{ grid-template-columns:1fr; } }  
  </style>    
  
  <!-- Firebase v8 -->    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>    <!-- html2canvas & jsPDF -->    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>  </head>  
<body>    <div class="container">  
    <h2>Group Membership Registration</h2>  <!-- State Selection -->  
<div class="form-group">  
  <label for="state">Select State:</label>  
  <select id="state" required>  
    <option value="">-- Select State --</option>  
    <option value="ogun">Ogun State</option>  
  </select>  
</div>  

<!-- LGA (activates after state) -->  
<div class="form-group hidden" id="lga-group">  
  <label for="lga">Select Local Government:</label>  
  <select id="lga" required></select>  
</div>  

<!-- Ward (activates after LGA) -->  
<div class="form-group hidden" id="ward-group">  
  <label for="ward">Select Ward:</label>  
  <select id="ward" required></select>  
</div>  

<!-- Polling Unit (activates after Ward) -->  
<div class="form-group hidden" id="unit-group">  
  <label for="unit">Select Polling Unit:</label>  
  <select id="unit" required></select>  
</div>  

<!-- BioData (activates after Unit) -->  
<form class="hidden" id="biodata-form" autocomplete="off">  
  <h3>Bio Data</h3>  

  <div class="form-group">  
    <label for="fullname">Full Name:</label>  
    <input type="text" id="fullname" required />  
  </div>  

  <div class="two-col">  
    <div class="form-group">  
      <label for="dob">Date of Birth:</label>  
      <input type="date" id="dob" required />  
    </div>  

    <div class="form-group">  
      <label for="age">Age:</label>  
      <input type="text" id="age" disabled />  
    </div>  
  </div>  
  <div class="form-group">
  <label for="gender">Gender:</label>
  <select id="gender" required>
    <option value="">-- Select Gender --</option>
    <option value="Male">Male</option>
    <option value="Female">Female</option>
    <option value="Other">Other</option>
  </select>
</div>
<div class="form-group">  
  <label for="phone">Phone Number:</label>  
  <input type="tel" id="phone" placeholder="+234xxxxxxxxxx" required />  
</div>

 <div class="form-group">  
    <label for="address">Address:</label>  
    <input type="text" id="address" />  
  </div>  

  <div class="form-group">  
    <label>Are you a registered voter?</label>  
    <select id="isVoter" required>  
      <option value="">-- Select --</option>  
      <option value="yes">Yes</option>  
      <option value="no">No</option>  
    </select>  
  </div>  

  <div class="form-group hidden" id="vin-group">  
    <label for="vin">Enter Voter Identification Number (VIN):</label>  
    <input type="text" id="vin" />  
  </div>  

  <div class="form-group">  
    <label>Are you a registered party member?</label>  
    <select id="isPartyMember" required>  
      <option value="">-- Select --</option>  
      <option value="yes">Yes</option>  
      <option value="no">No</option>  
    </select>  
  </div>  

  <div class="form-group hidden" id="party-id-group">  
    <label for="partyId">Enter Party Membership ID:</label>  
    <input type="text" id="partyId" />  
  </div>  

  <div class="form-group">  
    <button type="submit" id="register-btn">Register Member</button>  
  </div>  

  <div class="form-group">  
    <button type="button" id="preview-btn" class="secondary">Preview Registration</button>  
  </div>  

  <!-- Admin only field -->  
  <div class="form-group hidden" id="timestamp-group">  
    <label>Registration Time (Admin Only):</label>  
    <input type="text" id="regTime" disabled />  
  </div>  
</form>  

<p class="note small">  
  Only authorized Ward Secretaries or Chairmen can register members from their own ward.  
</p>  
<p><a href="admin.html">Go to Admin Dashboard</a></p>

  </div>  
  <script>
  // ====== LOCATION DATA (placeholder wards) ======
  const data = {
    ogun: {
      "Ijebu Ode": {
        "Ward-1": [
          "001-Beside Co-Operative Building (Existing)",
          "002-Emmanuel School I, Italupe (Existing)",
          "003-Moslem School, Isoku (Existing)"
        ],
        "Ward-2": [
          "001-Baptist Day School, Ereko (Existing)",
          "002-Front of Our Lady’s School (Existing)",
          "003-Front of Alhaji Kukoyi’s House (Existing)"
        ]
        // Add Ward-3 to Ward-11 as needed...
      }
    }
  };

  // ====== DOM elements ======
  const stateEl = document.getElementById("state");
  const lgaEl = document.getElementById("lga");
  const wardEl = document.getElementById("ward");
  const unitEl = document.getElementById("unit");
  const lgaGroup = document.getElementById("lga-group");
  const wardGroup = document.getElementById("ward-group");
  const unitGroup = document.getElementById("unit-group");
  const biodataForm = document.getElementById("biodata-form");
  const dobEl = document.getElementById("dob");
  const ageEl = document.getElementById("age");
  const isVoterEl = document.getElementById("isVoter");
  const vinGroup = document.getElementById("vin-group");
  const vinEl = document.getElementById("vin");
  const isPartyEl = document.getElementById("isPartyMember");
  const partyIdGroup = document.getElementById("party-id-group");
  const regTime = document.getElementById("regTime");
  const timestampGroup = document.getElementById("timestamp-group");

  // ====== SheetDB endpoint ======
  const sheetDB_URL = "https://sheetdb.io/api/v1/ji8u767etbjge";

  // ====== Populate dropdowns ======
  stateEl.addEventListener("change", () => {
    const state = stateEl.value.toLowerCase();
    resetDropdown(lgaEl);
    resetDropdown(wardEl);
    resetDropdown(unitEl);
    hideElement(biodataForm);
    hideElement(wardGroup);
    hideElement(unitGroup);
    if (data[state]) {
      lgaGroup.classList.remove("hidden");
      for (let lga in data[state]) {
        const opt = document.createElement("option");
        opt.value = lga;
        opt.textContent = lga;
        lgaEl.appendChild(opt);
      }
    } else lgaGroup.classList.add("hidden");
  });

  lgaEl.addEventListener("change", () => {
    const state = stateEl.value.toLowerCase();
    const lga = lgaEl.value;
    resetDropdown(wardEl);
    resetDropdown(unitEl);
    hideElement(biodataForm);
    hideElement(unitGroup);
    if (data[state] && data[state][lga]) {
      wardGroup.classList.remove("hidden");
      for (let ward in data[state][lga]) {
        const opt = document.createElement("option");
        opt.value = ward;
        opt.textContent = ward;
        wardEl.appendChild(opt);
      }
    } else wardGroup.classList.add("hidden");
  });

  wardEl.addEventListener("change", () => {
    const state = stateEl.value.toLowerCase();
    const lga = lgaEl.value;
    const ward = wardEl.value;
    resetDropdown(unitEl);
    hideElement(biodataForm);
    if (data[state] && data[state][lga] && data[state][lga][ward]) {
      unitGroup.classList.remove("hidden");
      data[state][lga][ward].forEach(unit => {
        const opt = document.createElement("option");
        opt.value = unit;
        opt.textContent = unit;
        unitEl.appendChild(opt);
      });
    } else unitGroup.classList.add("hidden");
  });

  unitEl.addEventListener("change", () => {
    if (unitEl.value) biodataForm.classList.remove("hidden");
    else biodataForm.classList.add("hidden");
  });

  // ====== Age calculation ======
  dobEl.addEventListener("change", () => {
    if (!dobEl.value) {
      ageEl.value = "";
      return;
    }
    const dob = new Date(dobEl.value);
    const today = new Date();
    let age = today.getFullYear() - dob.getFullYear();
    const m = today.getMonth() - dob.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) age--;
    ageEl.value = age;
  });

  // ====== VIN & Party toggles ======
  isVoterEl.addEventListener("change", () => {
    vinGroup.classList.toggle("hidden", isVoterEl.value !== "yes");
    if (isVoterEl.value !== "yes") vinEl.value = "";
  });

  isPartyEl.addEventListener("change", () => {
    partyIdGroup.classList.toggle("hidden", isPartyEl.value !== "yes");
    if (isPartyEl.value !== "yes") document.getElementById("partyId").value = "";
  });

  // ====== Admin timestamp ======
  document.addEventListener("DOMContentLoaded", () => {
    const isAdmin = true;
    if (isAdmin) {
      timestampGroup.classList.remove("hidden");
      regTime.value = new Date().toLocaleString();
    }
  });

  // ====== Utilities ======
  function resetDropdown(dropdown) {
    dropdown.innerHTML = '<option value="">-- Select --</option>';
  }
  function hideElement(el) {
    el.classList.add("hidden");
  }

  // ====== Form submit with VIN duplicate check ======
  biodataForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = {
      fullname: document.getElementById("fullname").value.trim(),
      phoneNumber: (() => {
        let rawPhone = document.getElementById("phone").value.trim();
        if (!rawPhone.startsWith("+234")) {
          rawPhone = "+234" + rawPhone.replace(/^0/, "");
        }
        return rawPhone;
      })(),
      address: document.getElementById("address").value.trim(),
      ward: wardEl.value,
      pollingUnit: unitEl.value,
      vin: vinEl.value.trim(),
      gender: document.getElementById("gender").value
    };

    // Basic validation
    const required = ["fullname", "phoneNumber", "address", "ward", "pollingUnit", "vin"];
    for (const id of required) {
      if (!formData[id]) {
        alert("Please fill in all required fields.");
        return;
      }
    }

    // VIN length check (optional, adjust if needed)
    if (formData.vin.length !== 19) {
      alert("VIN must be exactly 19 characters.");
      return;
    }

    try {
      // Check for duplicate VIN
      const checkRes = await fetch(`${sheetDB_URL}/search?vin=${encodeURIComponent(formData.vin)}`);
      if (!checkRes.ok) throw new Error("Failed to check VIN");

      const existing = await checkRes.json();

      if (existing.length > 0) {
        alert("This VIN has already been registered. Duplicate registrations are not allowed.");
        return;
      }

      // Submit new record
      const sheetPayload = { data: [formData] };
      const sheetRes = await fetch(sheetDB_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(sheetPayload)
      });

      if (!sheetRes.ok) throw new Error("SheetDB submission failed");

      alert("Member registered successfully!");
      e.target.reset();
      hideElement(biodataForm);
      resetDropdown(lgaEl);
      resetDropdown(wardEl);
      resetDropdown(unitEl);
      lgaGroup.classList.add("hidden");
      wardGroup.classList.add("hidden");
      unitGroup.classList.add("hidden");
    } catch (err) {
      console.error(err);
      alert("Error submitting data.");
    }
  });
</script>
  
  
  <!--
<script>  
  // ====== LOCATION DATA (placeholder wards) ======  
  const data = {
    ogun: {
        "Ijebu Ode": {
            "Ward-1": [
                "001-Beside Co-Operative Building (Existing)",
                "002-Emmanuel School I, Italupe (Existing)",
                "003-Moslem School, Isoku (Existing)"
            ],
            "Ward-2": [
                "001-Baptist Day School, Ereko (Existing)",
                "002-Front of Our Lady’s School (Existing)",
                "003-Front of Alhaji Kukoyi’s House (Existing)"
            ]
        }
    }
};
// ====== DOM elements ======
const stateEl = document.getElementById("state");
const lgaEl = document.getElementById("lga");
const wardEl = document.getElementById("ward");
const unitEl = document.getElementById("unit");
const lgaGroup = document.getElementById("lga-group");
const wardGroup = document.getElementById("ward-group");
const unitGroup = document.getElementById("unit-group");
const biodataForm = document.getElementById("biodata-form");
const dobEl = document.getElementById("dob");
const ageEl = document.getElementById("age");
const isVoterEl = document.getElementById("isVoter");
const vinGroup = document.getElementById("vin-group");
const vinEl = document.getElementById("vin");
const isPartyEl = document.getElementById("isPartyMember");
const partyIdGroup = document.getElementById("party-id-group");
const regTime = document.getElementById("regTime");
const timestampGroup = document.getElementById("timestamp-group");

// ====== SheetDB endpoint ======
const sheetDB_URL = "https://sheetdb.io/api/v1/ji8u767etbjge";

// ====== Populate dropdowns ======
stateEl.addEventListener("change", () => {
const state = stateEl.value.toLowerCase();
resetDropdown(lgaEl); resetDropdown(wardEl); resetDropdown(unitEl);
hideElement(biodataForm); hideElement(wardGroup); hideElement(unitGroup);
if (data[state]) {
lgaGroup.classList.remove("hidden");
for (let lga in data[state]) {
const opt = document.createElement("option");
opt.value = lga; opt.textContent = lga;
lgaEl.appendChild(opt);
}
} else lgaGroup.classList.add("hidden");
});

lgaEl.addEventListener("change", () => {
const state = stateEl.value.toLowerCase();
const lga = lgaEl.value;
resetDropdown(wardEl); resetDropdown(unitEl);
hideElement(biodataForm); hideElement(unitGroup);
if (data[state] && data[state][lga]) {
wardGroup.classList.remove("hidden");
for (let ward in data[state][lga]) {
const opt = document.createElement("option");
opt.value = ward; opt.textContent = ward;
wardEl.appendChild(opt);
}
} else wardGroup.classList.add("hidden");
});

wardEl.addEventListener("change", () => {
const state = stateEl.value.toLowerCase();
const lga = lgaEl.value;
const ward = wardEl.value;
resetDropdown(unitEl);
hideElement(biodataForm);
if (data[state] && data[state][lga] && data[state][lga][ward]) {
unitGroup.classList.remove("hidden");
data[state][lga][ward].forEach(unit => {
const opt = document.createElement("option");
opt.value = unit; opt.textContent = unit;
unitEl.appendChild(opt);
});
} else unitGroup.classList.add("hidden");
});

unitEl.addEventListener("change", () => {
if (unitEl.value) biodataForm.classList.remove("hidden");
else biodataForm.classList.add("hidden");
});

// ====== Age calculation ======
dobEl.addEventListener("change", () => {
if (!dobEl.value) { ageEl.value = ""; return; }
const dob = new Date(dobEl.value);
const today = new Date();
let age = today.getFullYear() - dob.getFullYear();
const m = today.getMonth() - dob.getMonth();
if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) age--;
ageEl.value = age;
});

// ====== VIN & Party toggles ======
isVoterEl.addEventListener("change", () => {
vinGroup.classList.toggle("hidden", isVoterEl.value !== "yes");
if (isVoterEl.value !== "yes") vinEl.value = "";
});

isPartyEl.addEventListener("change", () => {
partyIdGroup.classList.toggle("hidden", isPartyEl.value !== "yes");
if (isPartyEl.value !== "yes") document.getElementById("partyId").value = "";
});

// ====== Admin timestamp ======
document.addEventListener("DOMContentLoaded", () => {
const isAdmin = true;
if (isAdmin) {
timestampGroup.classList.remove("hidden");
regTime.value = new Date().toLocaleString();
}
});

// ====== Utilities ======
function resetDropdown(dropdown) { dropdown.innerHTML = '<option value="">-- Select --</option>'; }
function hideElement(el) { el.classList.add("hidden"); }

  // ====== Form submit (SheetDB only) ======
document.getElementById("biodata-form").addEventListener("submit", async (e) => {
  e.preventDefault();

 const formData = {
    fullname: document.getElementById("fullname").value.trim(),
    phoneNumber: (() => {
        let rawPhone = document.getElementById("phone").value.trim();
        if (!rawPhone.startsWith("+234")) {
            rawPhone = "+234" + rawPhone.replace(/^0/, "");
        }
        return rawPhone;
    })(),
    address: document.getElementById("address").value.trim(),
    ward: wardEl.value,
    pollingUnit: unitEl.value,
    vin: document.getElementById("vin").value.trim(),
    gender: document.getElementById("gender").value
};
  
  
  // Basic validation
  const required = ["fullname", "phoneNumber","address","ward","pollingUnit","vin"];
  for (const id of required) {
    if (!formData[id]) {
      alert("Please fill in all required fields.");
      return;
    }
  }

  try {
    const sheetPayload = { data: [formData] };
    const sheetRes = await fetch(sheetDB_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(sheetPayload)
    });

    if (!sheetRes.ok) throw new Error("SheetDB submission failed");

    alert("Member registered successfully!");
    e.target.reset();
    hideElement(biodataForm);
    resetDropdown(lgaEl);
    resetDropdown(wardEl);
    resetDropdown(unitEl);
    lgaGroup.classList.add("hidden");
    wardGroup.classList.add("hidden");
    unitGroup.classList.add("hidden");
  } catch (err) {
    console.error(err);
    alert("Error submitting data.");
  }
});
  
  
document.getElementById("myForm").addEventListener("submit", function (e) {
e.preventDefault();

const formData = new FormData(this);  
const jsonData = {};  
formData.forEach((value, key) => jsonData[key] = value);  

fetch("https://sheetdb.io/api/v1/ji8u767etbjge", {  
    method: "POST",  
    headers: { "Content-Type": "application/json" },  
    body: JSON.stringify({ data: jsonData })  
})  
.then(res => res.json())  
.then(response => {  
    console.log("Success:", response);  
    alert("Data submitted successfully!");  
    this.reset(); // Clears the form  
})  
.catch(error => {  
    console.error("Error:", error);  
    alert("Submission failed. Try again.");  
});

});
</script>
-->

</body>  
</html>
